/*
Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate
(polygonal) numbers and are generated by the following formulae:
Triangle 	  	P3,n=n(n+1)/2 	  	1, 3, 6, 10, 15, ...
Square 	     	P4,n=n2 	    	1, 4, 9, 16, 25, ...
Pentagonal 	  	P5,n=n(3n−1)/2 	  	1, 5, 12, 22, 35, ...
Hexagonal 	  	P6,n=n(2n−1) 	  	1, 6, 15, 28, 45, ...
Heptagonal 	  	P7,n=n(5n−3)/2 	  	1, 7, 18, 34, 55, ...
Octagonal 	  	P8,n=n(3n−2) 	  	1, 8, 21, 40, 65, ...

The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

    The set is cyclic, in that the last two digits of each number is the first two digits of the
    next number (including the last number with the first).
    Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882),
    is represented by a different number in the set.
    This is the only set of 4-digit numbers with this property.

Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type:
triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different
number in the set.

*/
use std::time::Instant;
use itertools::Itertools;


fn gen_tris() -> Vec<u64> {
    // Range is 44 - 141 to be in 1000 -> 10000
    let mut v = vec![];
    for i in 44..142 {
        v.push(i*(i+1)/2);
    }
    v
}

fn gen_squares() -> Vec<u64> {
    // Range 31 - 100
    let mut v = vec![];
    for i in 31..101 {
        v.push(i*i);
    }
    v
}

fn gen_pents() -> Vec<u64> {
    // 25 -> 81
    let mut v = vec![];
    for i in 25..83 {
        v.push(i*(3*i-1)/2);
    }
    v
}

fn gen_hexs() -> Vec<u64> {
    // 20 -> 71
    let mut v = vec![];
    for i in 22..73 {
        v.push(i*(2*i-1));
    }
    v
}


fn gen_hepts() -> Vec<u64> {
    // 20 -> 63
    let mut v = vec![];
    for i in 20..65 {
        v.push(i*(5*i-3)/2);
    }
    v
}

fn gen_octs() -> Vec<u64> {
    // 18 -> 59
    let mut v = vec![];
    for i in 18..59 {
        v.push(i*(3*i-2));
    }
    v
}

pub fn main() {
    let now = Instant::now();
    let tris = gen_tris();
    let squares = gen_squares();
    let pents = gen_pents();
    let hexs = gen_hexs();
    let hepts = gen_hepts();
    let octs = gen_octs();
    let v = vec![tris, squares, pents, hexs, hepts, octs];

    for perm in v.iter().permutations(v.len()).unique() {
        for o in perm[0] {
            let last_two_o = &o.to_string()[2..];
            let first_two_o = &o.to_string()[..2];
            for h in perm[1] {
                let last_two_h = &h.to_string()[2..];
                let first_two_h = &h.to_string()[..2];
                if first_two_h == last_two_o {
                    for hex in perm[2] {
                        let last_two_hex = &hex.to_string()[2..];
                        let first_two_hex = &hex.to_string()[..2];
                            if first_two_hex == last_two_h {
                                for p in perm[3] {
                                    let last_two_p = &p.to_string()[2..];
                                    let first_two_p = &p.to_string()[..2];
                                    if first_two_p == last_two_hex {
                                        for s in perm[4] {
                                            let last_two_s = &s.to_string()[2..];
                                            let first_two_s = &s.to_string()[..2];
                                            if first_two_s == last_two_p {
                                                for t in perm[5] {
                                                    let last_two_t = &t.to_string()[2..];
                                                    let first_two_t = &t.to_string()[..2];
                                                    if first_two_t == last_two_s {
                                                        if last_two_t == first_two_o {
                                                            println!("{}, {}, {}, {}, {}, {}", o, h, hex, p, s, t);
                                                            println!("{}", o + h + hex + p + s + t);
                                                            println!("Script took {} milliseconds to run", now.elapsed().as_millis());
                                                            return
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    println!("Script took {} milliseconds to run", now.elapsed().as_millis());
    }